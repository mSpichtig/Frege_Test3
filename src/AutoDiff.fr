-- AutoDiff.hs
-- Copyright 2015, Daniel Brice
-- https://www.danielbrice.net/blog/automatic-differentiation-is-trivial-in-haskell/
module examples.AutoDiff where

import frege.prelude.Math

-- differentiateDual . (\x -> x `powD`(Dual 2 0) + sinD x) $ Dual 2 1

data Dual = Dual Double Double
--derive Read Dual
derive Show Dual
derive Eq Dual

constantDual :: Double -> Dual
-- ^ Lifts a constant number to the `Dual` type.
constantDual x = Dual x 0

seedDual :: Double -> Double -> Dual
-- ^ Creates a Dual number.
seedDual x x' = Dual x x'

evaluateDual :: Dual -> Double
-- ^ Used to evaluate a function.
evaluateDual (Dual x _) = x

differentiateDual :: Dual -> Double
-- ^ Used to evaluate the derivative of a function.
differentiateDual (Dual _ x') = x'

instance Num Dual where 
  (+) (Dual u u') (Dual v v') = Dual (u + v) (u' + v')
  (*) (Dual u u') (Dual v v') = Dual (u * v) (u' * v + u * v')
  -- ACHTUNG ???FEHLER??? IN Zeile 94 in https://github.com/Frege/frege/blob/master/frege/prelude/PreludeBase.fr 
  (Dual u u') - (Dual v v') = Dual (u - v) (u' - v')
  fromInteger n               = Dual (fromInteger n) 0
  fromInt n                   = Dual (fromInt n) 0
  one                         = Dual 1 0
  zero                        = Dual 0 0
  (Dual u u') <=> (Dual v v')
    | u > v = GT
    | u < v = LT
    | otherwise = EQ
  
  -- Heikel
--- (div) (Dual u u') (Dual v v') = Dual (u / v) ((u' * v - u * v') / v ** 2)
recip (Dual u u')           = Dual (recip u) (-1 * u' * (recip (u ** 2)))
 where 
  recip x = 1.0 / x
--fromRational n              = Dual (fromRational n) 0
-- (**) (Dual u u') (Dual v v')  = Dual (u ** v) (u ** v * (v' * (log u) + (v * u' / u)))

-- instance Floating Dual where -- PROBLEM, wenn pow dann funktioniert sqrt, tan ... nicht mehr! Aber tan muss fuer instance Floating Dual eingeführt werden
piD                = Dual pi 0
expD (Dual u u')   = Dual (exp u) (u' * exp u)
sqrtD (Dual u u')  = Dual (sqrt u) (u' / (2 * sqrt u))
logD (Dual u u')   = Dual (log u) (u' / u)
sinD (Dual u u')   = Dual (sin u) (u' * cos u)
cosD (Dual u u')   = Dual (cos u) (- u' * sin u)
tanD (Dual u u')   = Dual (tan u) (1 / ((cos u) ** 2)) -- ACHTUNG Fehler
asinD (Dual u u')  = Dual (asin u) (u' / (sqrt(1 - u ** 2)))
acosD (Dual u u')  = Dual (acos u) (- u' / (sqrt(1 - u ** 2)))
atanD (Dual u u')  = Dual (atan u) (u' / (1 + u ** 2))
sinhD (Dual u u')  = Dual (sinh u) (u' * cosh u)
coshD (Dual u u')  = Dual (cosh u) (u' * sinh u)
tanhD (Dual u u')  = Dual (tanh u) (u' * (1 - (tanh u) ** 2))
asinhD (Dual u u') = Dual (asinh u) (u' / (sqrt(1 + u ** 2)))
acoshD (Dual u u') = Dual (acosh u) (u' / (sqrt(u ** 2 - 1)))
atanhD (Dual u u') = Dual (atanh u) (u' / (1 - u ** 2))
logBaseD (Dual u u') (Dual v v') = Dual (logBase u v) (((log v) * u' / u - (log u) * v' / v) / ((log u) ** 2))
divD (Dual u u') (Dual v v') = Dual (u / v) ((u' * v - u * v') / v ** 2)
powD (Dual u u') (Dual v v')  = Dual (u `pow` v) (u `pow` v * (v' * (log u) + (v * u' / u)))
--  (**) (Dual u u') (Dual v v')
--    = Dual (u ** v) (u ** v * (v' * (log u) + (v * u' / u)))
-- eigene Lösungen
--  signum (Dual u u') = Dual (signum u) (signum u')
--  atan2 (Dual u u')  (Dual v v') = Dual u u'
--  cbrt (Dual u u')  = Dual (fromIntegral u) (fromIntegral u')
--  ceil (Dual u u')  = Dual (ceil u) (ceil u')
--  getExponent (Dual u u') = getExponent u
--  hypot (Dual u u') (Dual v v') = hypot u v
--  ieeeRemainder (Dual u u') (Dual v v') = ieeeRemainder u v
--  log10 (Dual u u') = logBase (Dual 10 0) (Dual u u')
--  log1p (Dual u u') = Dual 1.0 0
--  nan (Dual u u')   = Dual (nan u) u'
--  copySign _ _ = Dual 1 0
--  e = Dual e 0
--  expm1 _ = Dual e 0
--  floor (Dual u u') = Dual (floor u) (floor u')
--  fromDouble d = Dual (fromDouble d) 0.0
--  negativeInfinity = Dual (negativeInfinity) 0
--  nextAfter _ = Dual 1.0 0.0 
--  nextUp _  = Dual 1.0 0.0
--  positiveInfinity = Dual (positiveInfinity) 0
--  rint _ = Dual 1.0 0.0
--  round (Dual u u') = Dual (round u) u'
--  scalb (Dual u u') i = Dual (u+i) u' 
--  toDegrees (Dual u u') = Dual 1.0 0
--  toRadians _ = Dual 1.0 0
--  ulp _ = Dual 1 0  
  



--f :: Dual -> Dual
--f x = x ** 3 - sin (x ** 2)

--main = do
--  putStrLn "What's the derivative of f(x) = x^2 - sin(x^2) at x = 2?"
--  print . differentiateDual . f $ Dual 2 1
-- print $  (\x -> x ** 3) $ Dual 2 1


    

 